@page "/"

@using System.Security.Claims
@using Domain.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Plugin.LocalNotification

@inject INotificationService NotificationService

<h1>Hello, @From!</h1>

Welcome to your new app.

<MudList T="string" Dense="true">
	@foreach (var contact in _contacts)
	{
		<MudList T="string">
			<MudListItem OnClick="() => SelectContact(contact.Name, contact.Id)">
				<AvatarContent>
					<MudAvatar Color="Color.Tertiary">U</MudAvatar>
				</AvatarContent>
				<ChildContent>
					@contact.Name
				</ChildContent>             
			</MudListItem>
		</MudList>
	}
</MudList>

@if (!string.IsNullOrWhiteSpace(_selectedContact))
{
	<MudButton OnClick="GoToChat">Go To Chat With @_selectedContact</MudButton>
}

<MudButton OnClick="SendNotification">Send Notification</MudButton>

@code
{
	private string _selectedContact = string.Empty;
	private Guid _id;
	private const string From = "Elizabeth";
	[CascadingParameter] public required HubConnection HubConnection { get; set; }
	private ClaimsPrincipal _currentUser = new(new ClaimsIdentity());
	private bool _isAuthenticated;
	
	private List<Contacts> _contacts = [];

	protected override async Task OnInitializedAsync()
	{
		_contacts.Add(new Contacts{Name = "Jully"});
		_contacts.Add(new Contacts{Name = "Ollie"});

		var claimsIdentity = new ClaimsIdentity([new Claim(ClaimTypes.Name, From)], "apiauth");

		_currentUser = new ClaimsPrincipal(claimsIdentity);
		
		// Update contact list
		HubConnection.On<List<string>>("UserListUpdated", usernames =>
		{
			var contact = usernames
				.Where(u => u != From) // Exclude self
				.Select(u => new Contacts { Name = u });

			_contacts.AddRange(contact.ToList());

			InvokeAsync(StateHasChanged);
		});

		await HubConnection.SendAsync("Register", From);
	}

	private void SelectContact(string contactName, Guid id)
	{
		_selectedContact = contactName;
		_id = id;
		StateHasChanged();
	}

	private void GoToChat() => NavigationManager.NavigateTo($"/chat-contact/{_selectedContact}/{_id}/{From}");
	
	private void SendNotification()
	{
		NotificationService.Show(new NotificationRequest
		{
			NotificationId = 1,
			Title = "New Message from",
			Description = "Some description here",
			Schedule = new NotificationRequestSchedule
			{
				NotifyTime = DateTime.Now.AddSeconds(5)
			}
		});
	}

}