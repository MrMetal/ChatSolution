@* @page "/chat-contact" *@
@page "/chat-contact/{To}/{Id}/{From}"


@using Domain.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client

<style>
	/* Estilo do conteúdo para garantir que o rodapé não sobreponha o conteúdo */
	.content {
		padding-bottom: 100px; /* Espaço para o rodapé fixo */
		box-sizing: border-box; /* Garante que o padding seja considerado no tamanho total */
	}

	/* MudPaper fixo no rodapé */
	.fixed-footer {
		position: fixed;
		bottom: 0;
		left: -15px;
		width: 100%;
		background-color: white; /* Ajuste conforme necessário */
		z-index: 10; /* Garante que o MudPaper fique acima de outros elementos */
		padding: 10px 0;
		box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.2); /* Um leve sombreado para destaque */
	}

		/* Ajuste para a largura do MudTextField */
		.fixed-footer .mud-textfield {
			flex-grow: 1;
		}


	/*LEFT OR RIGHT*/

	.my-message {
		text-align: right;
		background-color: #d1e7dd;
		padding: 10px;
		margin: 5px;
		border-radius: 10px;
		display: inline-block;
	}

	.their-message {
		text-align: left;
		background-color: #f8d7da;
		padding: 10px;
		margin: 5px;
		border-radius: 10px;
		display: inline-block;
	}

</style>

<MudButton OnClick="GoToUpdate">Elizabeth</MudButton>

<MudList T="string" Dense="true">
	@foreach (var chatMessage in _message)
	{
		<MudList T="string">
			<MudListItem>
				<ChildContent>

					<div class="@(chatMessage.IsMine ? "my-message" : "their-message")">
						<b>@chatMessage.From:</b> @chatMessage.Message
					</div>

				</ChildContent>
			</MudListItem>
		</MudList>
	}
</MudList>

<div class="content">
	<MudPaper Elevation="15" Class="d-flex flex-row px-2 mx-4 fixed-footer">
		<MudTextField T="string" Placeholder="Enter your message..." DisableUnderLine="true" Class="mx-4"
					  @bind-Value="_currentMessage" For="@(()=> _currentMessage)" />
		<MudButton OnClick="SendMessage" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Primary" ButtonType="ButtonType.Button"></MudButton>
	</MudPaper>
</div>

@code {
	[CascadingParameter] public required HubConnection HubConnection { get; set; }
	private string? _currentMessage;
	[Parameter] public string From { get; set; }
	[Parameter] public string To { get; set; }
	[Parameter] public string Id { get; set; }

	private readonly List<ChatMessage> _message = [];

	protected override Task OnInitializedAsync()
	{
		HubConnection.On<string, string, string>("MessageReceived", (from, to, message) =>
		{
			var newMessage = new ChatMessage { From = from, To = to, Message = message, IsMine = from == From };

			_message.Add(newMessage);
			InvokeAsync(StateHasChanged);
		});

		return Task.CompletedTask;
	}

	private async Task SendMessage()
	{
		if (string.IsNullOrWhiteSpace(_currentMessage)) return;

		await HubConnection.SendAsync("SendMessage", From, To, _currentMessage);
		_currentMessage = string.Empty;
	}

	private async Task GoToUpdate() => await OnInitializedAsync();

}