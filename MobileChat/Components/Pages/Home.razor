@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.SignalR.Client
@using MobileChat.Components.Pages.Componentes
@using Plugin.LocalNotification
@using Shared.Results

@inject INotificationService NotificationService

<h1>Hello, @From!</h1>

Welcome to your new app.

<MudList T="ContactsResult" Dense="true">
    @foreach (var contact in _contacts)
    {
        <MudListItem OnClick="() => SelectContact(contact)">
            <AvatarContent>
                <MudAvatar Color="@GetStatusColor(contact.Status)">@contact.Name[0]</MudAvatar>
            </AvatarContent>
            <ChildContent>
                <div>
                    <b>@contact.Name</b> - <i>@contact.Status</i>
                </div>
            </ChildContent>
        </MudListItem>
    }
</MudList>

@if (!string.IsNullOrWhiteSpace(_selectedContactEmail))
{
    <MudButton OnClick="GoToChat">Go To Chat With @_selectedContactName ()</MudButton>
}

<MudButton OnClick="SendNotification">Send Notification</MudButton>

<MudButton Color="Color.Primary" OnClick="OpenAddContactDialog">Adicionar Contato</MudButton>

@code
{
    private string _selectedContactEmail = string.Empty;
    private string _selectedContactName = string.Empty;
    private Guid _selectedContactId;
    [Parameter] public string From { get; set; } = string.Empty;

    [CascadingParameter] public required HubConnection HubConnection { get; set; }

    private List<ContactsResult> _contacts = [];

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        From = queryParams["user"] ?? "zoe@gmail.com";

        try
        {
            if (HubConnection.State == HubConnectionState.Disconnected)
            {
                await HubConnection.StartAsync();
            }

            // Atualiza status online/offline
            HubConnection.On<List<string>>("UserStatusUpdated", onlineEmails =>
            {
                foreach (var contact in _contacts)
                {
                    contact.Status = onlineEmails.Any(e => e.Equals(contact.Email, StringComparison.OrdinalIgnoreCase))
                        ? "Online"
                        : "Offline";
                }
                InvokeAsync(StateHasChanged);
            });

            // Atualiza lista de contatos
            HubConnection.On("UserListUpdated", async () =>
            {
                _contacts = await Http
                    .GetFromJsonAsync<List<ContactsResult>>($"https://localhost:7088/api/Contacts/GetAllContactsEndpoint/{From}") ?? new List<ContactsResult>();
                
                await InvokeAsync(StateHasChanged);
            });

            var claims = new[] { new Claim(ClaimTypes.Name, From), new Claim("Email", "zoe@gmail.com") };
            var claimsIdentity = new ClaimsIdentity(claims, "apiauth");
            var user = new ClaimsPrincipal(claimsIdentity);
            var authState = Task.FromResult(new AuthenticationState(user));
            HubConnection.On<string>("Authenticated", email => Console.WriteLine($"Connected as: {email}"));

            await HubConnection.SendAsync("Register", From);

            // Carrega lista inicial de contatos
            _contacts = await Http
                .GetFromJsonAsync<List<ContactsResult>>($"https://localhost:7088/api/Contacts/GetAllContactsEndpoint/{From}") ?? [];
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro: {ex.Message}");
        }
    }

    private void SelectContact(ContactsResult contact)
    {
        _selectedContactEmail = contact.Email;
        _selectedContactName = contact.Name;
        _selectedContactId = contact.Id;
        StateHasChanged();
    }

    private void GoToChat()
    {
        if (!string.IsNullOrWhiteSpace(_selectedContactEmail))
        {
            NavigationManager.NavigateTo($"/chat-contact/{_selectedContactEmail}/{_selectedContactId}/{From}");
        }
    }

    private static Color GetStatusColor(string status)
        => status == "Online" ? Color.Success : Color.Default;

    private void SendNotification()
    {
        NotificationService.Show(new NotificationRequest
        {
            NotificationId = 1,
            Title = "New Message from",
            Description = "Some description here",
            Schedule = new NotificationRequestSchedule
            {
                NotifyTime = DateTime.Now.AddSeconds(2)
            }
        });
    }

    private async Task OpenAddContactDialog()
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = await DialogService.ShowAsync<AddContactDialog>("Adicionar Contato", parameters, options);
        var result = await dialog.Result;

        if (!result!.Canceled)
        {
            var newContact = (ContactsResult)result.Data!;
            newContact.OwnerEmail = From;

            // Salva novo contato via SignalR
            await HubConnection.SendAsync("AddContact", newContact);

            // A lista será atualizada automaticamente via evento "UserListUpdated"
        }
    }
}